package autentica2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Matiss-Study
 */
public class BikeForm extends javax.swing.JFrame {

    /**
     * Creates new form BikeForm
     */
    public static int ou;

    public BikeForm() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("employeedb?zeroDateTimeBehavior=convertToNullPU").createEntityManager();
        booking_1Query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT b FROM Booking_1 b");
        booking_1List = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : booking_1Query.getResultList();
        jPanel1 = new javax.swing.JPanel();
        BikeID = new javax.swing.JComboBox<>();
        EmployeeID = new javax.swing.JComboBox<>();
        EmployeeLabel = new javax.swing.JLabel();
        BicycleLabel = new javax.swing.JLabel();
        TitleLabel = new javax.swing.JLabel();
        TimeStartBox = new javax.swing.JComboBox<>();
        TimeStartLabel = new javax.swing.JLabel();
        DateLabel = new javax.swing.JLabel();
        TimeEndBox = new javax.swing.JComboBox<>();
        TimeEndLabel = new javax.swing.JLabel();
        SubmitButton = new javax.swing.JButton();
        NotificationLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        CurrentTime = new javax.swing.JLabel();
        DatePicker = new org.jdesktop.swingx.JXDatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        RegisterID = new javax.swing.JTextField();
        RegisterName = new javax.swing.JTextField();
        RegisterLastName = new javax.swing.JTextField();
        RegisterEmployee = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BikeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BikeIDActionPerformed(evt);
            }
        });

        EmployeeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmployeeIDActionPerformed(evt);
            }
        });

        EmployeeLabel.setText("Employee");

        BicycleLabel.setText("Bicicle");

        TitleLabel.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        TitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleLabel.setText("Bike Booking System For Employees");
        TitleLabel.setToolTipText("");

        TimeStartBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeStartBoxActionPerformed(evt);
            }
        });

        TimeStartLabel.setText("Time Start");

        DateLabel.setText("Date");

        TimeEndBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeEndBoxActionPerformed(evt);
            }
        });

        TimeEndLabel.setText("Time End");

        SubmitButton.setBackground(new java.awt.Color(134, 184, 164));
        SubmitButton.setText("Submit");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        NotificationLabel.setBackground(new java.awt.Color(255, 0, 152));
        NotificationLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        NotificationLabel.setForeground(new java.awt.Color(255, 7, 67));
        NotificationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NotificationLabel.setText("NOTIFICATION");

        jButton1.setText("START PROGRAM");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        CurrentTime.setText("asa");

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, booking_1List, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${bikeId}"));
        columnBinding.setColumnName("Bike Id");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${date}"));
        columnBinding.setColumnName("Date");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${timeStart}"));
        columnBinding.setColumnName("Time Start");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${timeEnd}"));
        columnBinding.setColumnName("Time End");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(NotificationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(EmployeeLabel)
                                        .addComponent(EmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(BikeID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(BicycleLabel))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(DatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(DateLabel)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(368, 368, 368)
                                    .addComponent(jButton1)))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(TimeStartBox, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(TimeStartLabel))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(TimeEndLabel)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(TimeEndBox, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                    .addComponent(SubmitButton))))))
                .addGap(107, 107, 107))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(CurrentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CurrentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmployeeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BicycleLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TimeStartLabel)
                        .addComponent(TimeEndLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmployeeID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BikeID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TimeStartBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TimeEndBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SubmitButton)))
                .addGap(16, 16, 16)
                .addComponent(NotificationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jLabel1.setText("Register new employee");

        RegisterID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RegisterID.setText("id");
        RegisterID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterIDActionPerformed(evt);
            }
        });

        RegisterName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RegisterName.setText("name");
        RegisterName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterNameActionPerformed(evt);
            }
        });

        RegisterLastName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RegisterLastName.setText("last name");
        RegisterLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterLastNameActionPerformed(evt);
            }
        });

        RegisterEmployee.setBackground(new java.awt.Color(134, 184, 164));
        RegisterEmployee.setText("Register");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RegisterID, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RegisterName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(RegisterLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(RegisterEmployee)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegisterID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RegisterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RegisterLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RegisterEmployee))
                .addGap(0, 55, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatePickerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DatePickerActionPerformed

    private void RegisterLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegisterLastNameActionPerformed

    private void RegisterNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegisterNameActionPerformed

    private void RegisterIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegisterIDActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            getConnection("root", "parole");
        } catch (Exception ex) {
            Logger.getLogger(BikeForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        NotificationLabel.setVisible(false);
        connectToAndAddComboBoxValuesEmployees("root", "parole");
        connectToAndAddComboBoxValuesBikes("root", "parole");
        setTimeStart();
        setTimeFinish();

        // Calendar time_start = (Calendar) TimeStartBox.getSelectedItem();
        //System.out.println(time_start);
        Date date = new Date();
        CurrentTime.setText(new SimpleDateFormat("MM-dd-yyyy HH:mm").format(date));

    }//GEN-LAST:event_jButton1ActionPerformed

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        ou = 0;
        NotificationLabel.setVisible(false);
        try {
            checkIfBooked();
        } catch (Exception ex) {
            Logger.getLogger(BikeForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        String timeStart = TimeStartBox.getSelectedItem().toString();
        String timeEnd = TimeEndBox.getSelectedItem().toString();

        try {
            if (checkDateIfValid()) {
                if (ou == 0) {
                    String eid = EmployeeID.getSelectedItem().toString();
                    String bid = BikeID.getSelectedItem().toString();
                    //Date date = DatePicker.getDate();

                    String pattern = "MM-dd-yyyy";
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

                    String date = simpleDateFormat.format(DatePicker.getDate());

                    try {
                        post(eid, bid, date, timeStart, timeEnd);
                        //jTable1.repaint();
                    } catch (Exception ex) {
                        Logger.getLogger(BikeForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(BikeForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_SubmitButtonActionPerformed

    private void TimeEndBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeEndBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeEndBoxActionPerformed

    private void TimeStartBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeStartBoxActionPerformed

    }//GEN-LAST:event_TimeStartBoxActionPerformed

    private void EmployeeIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmployeeIDActionPerformed

    }//GEN-LAST:event_EmployeeIDActionPerformed

    private void BikeIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BikeIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BikeIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BikeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BikeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BikeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BikeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BikeForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BicycleLabel;
    private static javax.swing.JComboBox<String> BikeID;
    private static javax.swing.JLabel CurrentTime;
    private javax.swing.JLabel DateLabel;
    private org.jdesktop.swingx.JXDatePicker DatePicker;
    private static javax.swing.JComboBox<String> EmployeeID;
    private javax.swing.JLabel EmployeeLabel;
    private static javax.swing.JLabel NotificationLabel;
    private static javax.swing.JButton RegisterEmployee;
    private static javax.swing.JTextField RegisterID;
    private static javax.swing.JTextField RegisterLastName;
    private static javax.swing.JTextField RegisterName;
    private javax.swing.JButton SubmitButton;
    private static javax.swing.JComboBox<String> TimeEndBox;
    private javax.swing.JLabel TimeEndLabel;
    private static javax.swing.JComboBox<String> TimeStartBox;
    private javax.swing.JLabel TimeStartLabel;
    private javax.swing.JLabel TitleLabel;
    private java.util.List<autentica2.Booking_1> booking_1List;
    private javax.persistence.Query booking_1Query;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public static void createConnection(String username, String password) {
        try {
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/employeedb?zeroDateTimeBehavior=convertToNull",
                    username,
                    password);

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * from emplyee");

        } catch (Exception ex) {
            System.out.println(ex.toString());

        }

    }

    public static void connectToAndAddComboBoxValuesEmployees(String username, String password) {
        try {
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/employeedb?zeroDateTimeBehavior=convertToNull",
                    username,
                    password);

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * from emplyee");

            while (rs.next()) {
                int workerID = rs.getInt("id");
                String wID = String.valueOf(workerID);
                BikeForm.EmployeeID.addItem(wID);
            }

        } catch (Exception ex) {
            System.out.println(ex.toString());

        }
    }

    public static void connectToAndAddComboBoxValuesBikes(String username, String password) {
        try {
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/employeedb?zeroDateTimeBehavior=convertToNull",
                    username,
                    password);

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * from bikes");

            while (rs.next()) {
                int bikeID = rs.getInt("id");
                String bID = String.valueOf(bikeID);
                BikeForm.BikeID.addItem(bID);
            }

        } catch (Exception ex) {
            System.out.println(ex.toString());

        }
    }

    public void setTimeStart() {
        DateFormat df = new SimpleDateFormat("HH:mm");
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        int startDate = cal.get(Calendar.DATE);
        while (cal.get(Calendar.DATE) == startDate) {
            BikeForm.TimeStartBox.addItem(df.format(cal.getTime()));
            cal.add(Calendar.MINUTE, 30);
        }

    }

    public void setTimeFinish() {
        DateFormat df = new SimpleDateFormat("HH:mm");
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        int startDate = cal.get(Calendar.DATE);
        while (cal.get(Calendar.DATE) == startDate) {
            BikeForm.TimeEndBox.addItem(df.format(cal.getTime()));
            cal.add(Calendar.MINUTE, 30);
        }

    }

    public List<booking> bookingList = new ArrayList<>();

    public void addBooking(String eid, String bid, String s, String e, String date) {

        booking booking1 = new booking(eid, bid, date, s, e);

        bookingList.add(booking1);
        System.out.println(bookingList.get(0).toString());

    }

    public static Connection getConnection(String username, String password) throws Exception {
        try {
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/employeedb?zeroDateTimeBehavior=convertToNull",
                    username,
                    password);
            System.out.println("Connected");
            return con; // will return connection only if it works
        } catch (Exception e) {
            System.out.println(e);
        }
        return null;
    }

    public static void post(String id, String bike_id, String date, String time_start, String time_end) throws Exception {

        try {
            Connection con = getConnection("root", "parole");

            PreparedStatement pstmt = con.prepareStatement("Insert into booking (id, bike_id, date, time_start, time_end) VALUES ('" + id + "','" + bike_id + "','" + date + "','" + time_start + "','" + time_end + "')");
            pstmt.executeUpdate();

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void checkIfBooked() throws SQLException, Exception {

        try {
            Connection con = getConnection("root", "parole");

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT id,bike_id,date,time_start,time_end FROM booking");

            while (rs.next()) {
                String id_check = rs.getString("id");
                String bike_id_check = rs.getString("bike_id");
                String date_check = rs.getString("date").substring(0, 10);

                String time_start_check = rs.getString("time_start");
                String time_end_check = rs.getString("time_end");

                //System.out.println("SelectedID= " + BikeID.getSelectedItem());
                //System.out.println("nike check id= " + bike_id_check);
                if (BikeID.getSelectedItem().toString().equals(bike_id_check)) {
                    String l = CurrentTime.getText().substring(0, 10);
                    //System.out.println(l);
                    //System.out.println(BikeID.getSelectedItem().toString());

                    if (date_check.equals(l)) {

                        SimpleDateFormat format = new SimpleDateFormat("HH:mm");
                        Date time_start_check1 = format.parse(time_start_check);
                        System.out.println(time_start_check1);
                        Date selected_start_time = format.parse(TimeStartBox.getSelectedItem().toString());
                        System.out.println(selected_start_time);
                        Date time_end_check1 = format.parse(time_end_check);
                        System.out.println(time_end_check1);
                        Date selected_end_time = format.parse(TimeEndBox.getSelectedItem().toString());
                        System.out.println(selected_end_time);

                        if (selected_start_time.compareTo(time_start_check1) <= 0 && selected_end_time.compareTo(time_end_check1) >= 0
                                || selected_start_time.compareTo(time_start_check1) <= 0 && selected_end_time.compareTo(time_end_check1) <= 0 && selected_end_time.compareTo(time_start_check1) >= 0
                                || selected_start_time.compareTo(time_start_check1) >= 0 && selected_end_time.compareTo(time_end_check1) >= 0
                                || selected_start_time.compareTo(time_start_check1) >= 0 && selected_end_time.compareTo(time_end_check1) <= 0) {
                            NotificationLabel.setText("BOOKING UNSUCCESSFUL - CHOOSE DIFFERENT TIME/BIKE");
                            NotificationLabel.setVisible(true);
                            ou = 1;

                        }

                    }
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static boolean checkDateIfValid() throws ParseException {
        SimpleDateFormat format = new SimpleDateFormat("HH:mm");
        Date selected_start_time = format.parse(TimeStartBox.getSelectedItem().toString());
        Date selected_end_time = format.parse(TimeEndBox.getSelectedItem().toString());

        if (selected_start_time.compareTo(selected_end_time) >= 0) {
            NotificationLabel.setText("WRONG TIME");
            NotificationLabel.setVisible(true);
            return false;
        } else {
            return true;
        }

    }
     
    public static void registerNewEmployee(String id, String name, String last_name){
         try {
            Connection con = getConnection("root", "parole");

            PreparedStatement pstmt = con.prepareStatement("Insert into emplyee (id, name, last_name) VALUES ('" + id + "','" + name + "','" + last_name +"')");
            pstmt.executeUpdate();
            

        } catch (Exception e) {
            
            System.out.println(e);
        }
    }
}

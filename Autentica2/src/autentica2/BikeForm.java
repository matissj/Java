package autentica2;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Matiss-Study
 */
public class BikeForm extends javax.swing.JFrame {

    /**
     * Creates new form BikeForm
     */
    public static int ou;

    public BikeForm() {

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("employeedb?zeroDateTimeBehavior=convertToNullPU").createEntityManager();
        booking_1Query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT b FROM Booking_1 b");
        booking_1List = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : booking_1Query.getResultList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        BikeID = new javax.swing.JComboBox<>();
        EmployeeID = new javax.swing.JComboBox<>();
        EmployeeLabel = new javax.swing.JLabel();
        BicycleLabel = new javax.swing.JLabel();
        TitleLabel = new javax.swing.JLabel();
        TimeStartBox = new javax.swing.JComboBox<>();
        TimeStartLabel = new javax.swing.JLabel();
        DateLabel = new javax.swing.JLabel();
        TimeEndBox = new javax.swing.JComboBox<>();
        TimeEndLabel = new javax.swing.JLabel();
        SubmitButton = new javax.swing.JButton();
        NotificationLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        CurrentTime = new javax.swing.JLabel();
        DatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        RegisterID = new javax.swing.JTextField();
        RegisterName = new javax.swing.JTextField();
        RegisterLastName = new javax.swing.JTextField();
        RegisterEmployee = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BikeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BikeIDActionPerformed(evt);
            }
        });

        EmployeeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmployeeIDActionPerformed(evt);
            }
        });

        EmployeeLabel.setText("Employee");

        BicycleLabel.setText("Bicicle");

        TitleLabel.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        TitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleLabel.setText("Bike Booking System For Employees");
        TitleLabel.setToolTipText("");

        TimeStartBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeStartBoxActionPerformed(evt);
            }
        });

        TimeStartLabel.setText("Time Start");

        DateLabel.setText("Date");

        TimeEndBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeEndBoxActionPerformed(evt);
            }
        });

        TimeEndLabel.setText("Time End");

        SubmitButton.setBackground(new java.awt.Color(134, 184, 164));
        SubmitButton.setText("Submit");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        NotificationLabel.setBackground(new java.awt.Color(255, 0, 152));
        NotificationLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        NotificationLabel.setForeground(new java.awt.Color(255, 7, 67));
        NotificationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NotificationLabel.setText("NOTIFICATION");

        jButton1.setText("START PROGRAM");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        CurrentTime.setText("asa");

        jLabel1.setText("Register new employee");

        RegisterID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RegisterID.setText("id");
        RegisterID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterIDActionPerformed(evt);
            }
        });

        RegisterName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RegisterName.setText("name");
        RegisterName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterNameActionPerformed(evt);
            }
        });

        RegisterLastName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RegisterLastName.setText("last name");
        RegisterLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterLastNameActionPerformed(evt);
            }
        });

        RegisterEmployee.setBackground(new java.awt.Color(134, 184, 164));
        RegisterEmployee.setText("Register");
        RegisterEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterEmployeeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(CurrentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(RegisterID, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RegisterName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(RegisterLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(RegisterEmployee)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(263, 263, 263)
                                .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 182, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(NotificationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(EmployeeLabel)
                                                .addComponent(EmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(BikeID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(BicycleLabel))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(DatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(DateLabel)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(368, 368, 368)
                                            .addComponent(jButton1)))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(TimeStartBox, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(TimeStartLabel))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(TimeEndLabel)
                                            .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(TimeEndBox, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                            .addComponent(SubmitButton))))))
                        .addGap(107, 107, 107))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CurrentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmployeeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BicycleLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TimeStartLabel)
                        .addComponent(TimeEndLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmployeeID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BikeID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TimeStartBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TimeEndBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SubmitButton)))
                .addGap(16, 16, 16)
                .addComponent(NotificationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegisterID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RegisterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RegisterLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RegisterEmployee))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatePickerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DatePickerActionPerformed

    private void RegisterLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegisterLastNameActionPerformed

    private void RegisterNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegisterNameActionPerformed

    private void RegisterIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegisterIDActionPerformed

    private void RegisterEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterEmployeeActionPerformed
        String newID = RegisterID.getText();
        String newName = RegisterName.getText();
        String newLastName = RegisterLastName.getText();

        registerNewEmployee(newID, newName, newLastName); // TODO add your handling code here:
    }//GEN-LAST:event_RegisterEmployeeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            getConnection();
        } catch (Exception ex) {
            Logger.getLogger(BikeForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        NotificationLabel.setVisible(false);
        connectToAndAddComboBoxValuesEmployees();
        connectToAndAddComboBoxValuesBikes();
        setTimeStart();
        setTimeFinish();

        Date date = new Date();
        CurrentTime.setText(new SimpleDateFormat("MM-dd-yyyy HH:mm").format(date));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed

        ou = 0;
        NotificationLabel.setVisible(false);
        try {
            checkIfBooked();
        } catch (Exception ex) {
            Logger.getLogger(BikeForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        String timeStart = TimeStartBox.getSelectedItem().toString();
        String timeEnd = TimeEndBox.getSelectedItem().toString();

        try {
            if (checkDateIfValid()) {
                if (ou == 0) {
                    String eid = EmployeeID.getSelectedItem().toString();
                    String bid = BikeID.getSelectedItem().toString();
                    //Date date = DatePicker.getDate();

                    String pattern = "MM-dd-yyyy";
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

                    String date = simpleDateFormat.format(DatePicker.getDate());
                    try {
                        post(eid, bid, date, timeStart, timeEnd);
                        //jTable1.repaint();

                    } catch (Exception ex) {
                        Logger.getLogger(BikeForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(BikeForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SubmitButtonActionPerformed

    private void TimeEndBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeEndBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeEndBoxActionPerformed

    private void TimeStartBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeStartBoxActionPerformed

    }//GEN-LAST:event_TimeStartBoxActionPerformed

    private void EmployeeIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmployeeIDActionPerformed

    }//GEN-LAST:event_EmployeeIDActionPerformed

    private void BikeIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BikeIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BikeIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        Main frame = new Main();
        frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);

     
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BikeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BikeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BikeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BikeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BikeForm().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BicycleLabel;
    private static javax.swing.JComboBox<String> BikeID;
    private static javax.swing.JLabel CurrentTime;
    private javax.swing.JLabel DateLabel;
    private org.jdesktop.swingx.JXDatePicker DatePicker;
    private static javax.swing.JComboBox<String> EmployeeID;
    private javax.swing.JLabel EmployeeLabel;
    private static javax.swing.JLabel NotificationLabel;
    private static javax.swing.JButton RegisterEmployee;
    private static javax.swing.JTextField RegisterID;
    private static javax.swing.JTextField RegisterLastName;
    private static javax.swing.JTextField RegisterName;
    private javax.swing.JButton SubmitButton;
    private static javax.swing.JComboBox<String> TimeEndBox;
    private javax.swing.JLabel TimeEndLabel;
    private static javax.swing.JComboBox<String> TimeStartBox;
    private javax.swing.JLabel TimeStartLabel;
    private javax.swing.JLabel TitleLabel;
    private java.util.List<autentica2.Booking_1> booking_1List;
    private javax.persistence.Query booking_1Query;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("empty-statement")

    public static class Main extends JFrame {

        public Main() throws Exception {
            ArrayList columnNames = new ArrayList();
            ArrayList data = new ArrayList();
            Connection con = getConnection();

            Statement stmt = con.createStatement();
            String sql = "SELECT * FROM booking";
            ResultSet rs = stmt.executeQuery(sql);
            ResultSetMetaData md;
            md = rs.getMetaData();

            int columns = md.getColumnCount();
            for (int i = 1; i <= columns; i++) {
                columnNames.add(md.getColumnName(i));
            }

            while (rs.next()) {
                ArrayList row = new ArrayList(columns);
                for (int i = 1; i <= columns; i++) {
                    row.add(rs.getObject(i));
                }

                data.add(row);
            }
            Vector columnNamesVector = new Vector();
            Vector dataVector = new Vector();

            for (int i = 0; i < data.size(); i++) {
                ArrayList subArray = (ArrayList) data.get(i);
                Vector subVector = new Vector();
                for (int j = 0; j < subArray.size(); j++) {
                    subVector.add(subArray.get(j));
                }
                dataVector.add(subVector);
            }
            for (int i = 0; i < columnNames.size(); i++) {
                columnNamesVector.add(columnNames.get(i));
            }
            JTable table = new JTable(dataVector, columnNamesVector) {
                public Class getColumnClass(int column) {
                    for (int row = 0; row < getRowCount(); row++) {
                        Object o = getValueAt(row, column);
                        if (o != null) {
                            return o.getClass();
                        }
                    }
                    return Object.class;
                }
            };
            JScrollPane scrollPane = new JScrollPane(table);
            getContentPane().add(scrollPane);
            JPanel buttonPanel = new JPanel();
            getContentPane().add(buttonPanel, BorderLayout.SOUTH);
        }

    }

    public static void createConnection() {
        try {
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://sql7.freemysqlhosting.net:3306/sql7252049?zeroDateTimeBehavior=convertToNull",
                    "sql7252049",
                    "sql7252049");

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * from emplyee");

        } catch (Exception ex) {
            System.out.println(ex.toString());

        }

    }

    public static void connectToAndAddComboBoxValuesEmployees() {
        try {
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://sql7.freemysqlhosting.net:3306/sql7252049?zeroDateTimeBehavior=convertToNull",
                    "sql7252049",
                    "qpBiA6xPGd");

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * from emplyee");

            while (rs.next()) {
                String workerID = rs.getString("id");
                String wID = String.valueOf(workerID);
                BikeForm.EmployeeID.addItem(wID);
            }

        } catch (Exception ex) {
            System.out.println(ex.toString());

        }
    }

    public static void connectToAndAddComboBoxValuesBikes() {
        try {
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://sql7.freemysqlhosting.net:3306/sql7252049?zeroDateTimeBehavior=convertToNull",
                    "sql7252049",
                    "qpBiA6xPGd");

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * from bikes");

            while (rs.next()) {
                String bikeID = rs.getString("id");
                String bID = String.valueOf(bikeID);
                BikeForm.BikeID.addItem(bID);
            }

        } catch (Exception ex) {
            System.out.println(ex.toString());

        }
    }

    public void setTimeStart() {
        DateFormat df = new SimpleDateFormat("HH:mm");
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        int startDate = cal.get(Calendar.DATE);
        while (cal.get(Calendar.DATE) == startDate) {
            BikeForm.TimeStartBox.addItem(df.format(cal.getTime()));
            cal.add(Calendar.MINUTE, 30);
        }

    }

    public void setTimeFinish() {
        DateFormat df = new SimpleDateFormat("HH:mm");
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        int startDate = cal.get(Calendar.DATE);
        while (cal.get(Calendar.DATE) == startDate) {
            BikeForm.TimeEndBox.addItem(df.format(cal.getTime()));
            cal.add(Calendar.MINUTE, 30);
        }

    }

    public static Connection getConnection() throws Exception {
        try {
            Connection con = DriverManager.getConnection(
                    "jdbc:mysql://sql7.freemysqlhosting.net:3306/sql7252049?zeroDateTimeBehavior=convertToNull",
                    "sql7252049",
                    "qpBiA6xPGd");
            return con; // will return connection only if it works
        } catch (Exception e) {
            System.out.println(e);
        }
        return null;
    }

    public static void post(String id, String bike_id, String date, String time_start, String time_end) throws Exception {

        try {
            Connection con = getConnection();

            PreparedStatement pstmt = con.prepareStatement("Insert into booking (id, bike_id, date, time_start, time_end) VALUES ('" + id + "','" + bike_id + "','" + date + "','" + time_start + "','" + time_end + "')");
            pstmt.executeUpdate();

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void checkIfBooked() throws SQLException, Exception {

        try {
            Connection con = getConnection();

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT id,bike_id,date,time_start,time_end FROM booking");

            while (rs.next()) {
                String id_check = rs.getString("id");
                String bike_id_check = rs.getString("bike_id");
                String date_check = rs.getString("date").substring(0, 10);

                String time_start_check = rs.getString("time_start");
                String time_end_check = rs.getString("time_end");

                //System.out.println("SelectedID= " + BikeID.getSelectedItem());
                //System.out.println("nike check id= " + bike_id_check);
                if (BikeID.getSelectedItem().toString().equals(bike_id_check)) {
                    String l = CurrentTime.getText().substring(0, 10);

                    if (date_check.equals(l)) {

                        SimpleDateFormat format = new SimpleDateFormat("HH:mm");
                        Date time_start_check1 = format.parse(time_start_check);

                        Date selected_start_time = format.parse(TimeStartBox.getSelectedItem().toString());

                        Date time_end_check1 = format.parse(time_end_check);

                        Date selected_end_time = format.parse(TimeEndBox.getSelectedItem().toString());

                        if (selected_start_time.compareTo(time_start_check1) <= 0 && selected_end_time.compareTo(time_end_check1) >= 0
                                || selected_start_time.compareTo(time_start_check1) <= 0 && selected_end_time.compareTo(time_end_check1) <= 0 && selected_end_time.compareTo(time_start_check1) >= 0
                                || selected_start_time.compareTo(time_start_check1) >= 0 && selected_end_time.compareTo(time_end_check1) >= 0
                                || selected_start_time.compareTo(time_start_check1) >= 0 && selected_end_time.compareTo(time_end_check1) <= 0) {
                            NotificationLabel.setText("BOOKING UNSUCCESSFUL - CHOOSE DIFFERENT TIME/BIKE");
                            NotificationLabel.setVisible(true);
                            ou = 1;

                        }

                    }
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static boolean checkDateIfValid() throws ParseException {
        SimpleDateFormat format = new SimpleDateFormat("HH:mm");
        Date selected_start_time = format.parse(TimeStartBox.getSelectedItem().toString());
        Date selected_end_time = format.parse(TimeEndBox.getSelectedItem().toString());

        if (selected_start_time.compareTo(selected_end_time) >= 0) {
            NotificationLabel.setText("WRONG TIME");
            NotificationLabel.setVisible(true);
            return false;
        } else {
            return true;
        }

    }

    public static void registerNewEmployee(String id, String name, String last_name) {
        try {
            Connection con = getConnection();

            PreparedStatement pstmt = con.prepareStatement("Insert into emplyee (id, name, last_name) VALUES ('" + id + "','" + name + "','" + last_name + "')");
            pstmt.executeUpdate();

        } catch (Exception e) {

            System.out.println(e);
        }

    }
}
